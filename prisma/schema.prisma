// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  // NOTE: When using Reviewgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth, represents information about OAuth accounts
// that are associated with the user.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  about         String?
  status        String      @default("Upcoming Student")
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  favorites     Favorites[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Degree Door Schema
model Review {
  id        String   @id @default(cuid())
  course    String
  pros      String
  cons      String
  userId    String
  degreeId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  degree    Degree   @relation(fields: [degreeId], references: [id])

  @@index([degreeId, createdAt("desc")]) // Fetching reviews is mainly done through degreeId
  @@index([userId])
}

model Degree {
  id        String      @id
  name      String
  createdAt DateTime    @default(now())
  reviews   Review[]
  Favorites Favorites[]
}

model Favorites {
  userId   String
  degreeId String
  user     User   @relation(fields: [userId], references: [id])
  degree   Degree @relation(fields: [degreeId], references: [id])

  @@id([userId, degreeId])
  @@index([userId]) // Searching for favorites is done through the userId
  @@index([degreeId])
}
